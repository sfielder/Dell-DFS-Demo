<apex:page controller="FN.FindNearbyMap" action="{!init}" sidebar="false"> 
<script type="text/javascript" src="http://www.google.com/jsapi"></script>
<script src="{!URLFOR($Resource.FN__JQ)}" type="text/javascript" ></script>
<script src="{!URLFOR($Resource.FN__tableDnD)}" type="text/javascript" ></script>
<script src="{!URLFOR($Resource.FN__jqTable)}" type="text/javascript" ></script>
<script src="{!URLFOR($Resource.FN__fixedTHeader)}" type="text/javascript" ></script>
<script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.1/jquery-ui.js" type="text/javascript"></script>
<script src="http://maps.google.com/maps?file=api&v=2&key={!GKey}&sensor=true" type="text/javascript"></script>
<style type='text/css'>
  .Filter{
        background:url("/img/alohaSkin/grid_headerbg.gif") repeat-x scroll 0 bottom #FFFFFF;
        color:#000000;
        font-size:0.9em;
        font-weight:bold;
  }
  .FilterItem{
    color:#4A4A56;
    font-weight:bold;
    text-align: right;
  }
  .allDestinationList{
    background-image:url("{!URLFOR($Resource.FN__DrivingDirections)}"); 
  }
  .allMapItemsTable{
    overflow-x: hidden;
    overflow-y: auto;
  }
  .fullDynamicDirections{
    overflow-x: hidden;
    overflow-y: auto;
  }
  .hover{
    width: 18px;
  }
  .item{
        border-bottom: 1px solid #D4DADC;
        background-color: #e3f3ff;
        color:#000000;
        font-size:0.9em;
        font-weight:bold;
        height: 30px;
        width: 180;
        
        list-style: none;
        margin-left: 0;
        padding-left: 1em;
  }
  .Connected{
        padding-left: 0;
        padding-top: 0;
        margin-top:  0;
        margin-left:0px;
        margin-right:0px;
        list-style:none; 
    }
  .Highlight{
    color:white;
    background-color: #029acc;
    border-bottom: 1px solid #D4DADC;
    font-size:0.9em;
    font-weight:bold;
    height: 30px;
    width: 180;
    list-style: none;
    margin-left: 0;
    padding-left: 1em;
  }
  #getDetailsLink{
    color: #FF0000;
  }
</style>
<apex:form ><apex:commandLink action="{!goBackToRecord}" value="&lt;&lt; Back to {! JSENCODE(StartingPoint.rName)}" /></apex:form>
<apex:form >
<apex:outputPanel rendered="{!needFilters}"> 
    <div style="text-align:right;"><span >&nbsp;<a class="Filter" onclick="jQuery('#filterDiv').slideToggle('slow');" href="javascript:%20void%280%29%3B">Filters</a>&nbsp;</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</div>
    <div id="filterDiv">
        <table class="Filter" border="0" cellspacing="0" cellpadding="0" width="100%">
            <tr class="FilterItem" > 
                <td  valign="top" width="30%">
                    <table>
                        <tr >
                            <td >
                                <img src='{!URLFOR($Resource.FN__LeadIcon)}' />
                            </td>
                            <td>Leads</td>
                            <td align='left'>
                                <apex:inputCheckbox value="{!searchLeads}" disabled="{! !LeadsAvailable}"/>
                            </td>
                        
                            <td >
                                <img src='{!URLFOR($Resource.FN__AccountIcon)}' /><br/>
                            </td>
                            <td>Accounts</td>
                            <td align='left'>
                                <apex:inputCheckbox value="{!searchAccounts}" disabled="{! !AccountsAvailable}"/><br/>
                            </td >
                            <td width="10px"> </td>
                            <td>
                                <img src='{!URLFOR($Resource.FN__Distance)}' width="30px" /><br/>
                            </td>
                            <td >
                                Distance        
                            </td>
                            <td align='left'>
                                <apex:selectList value="{!Distance}" multiselect="false" size="1"><apex:selectOptions value="{!Distances}"/></apex:selectList>
                            </td>
                        </tr>
                        <tr >
                            <td >
                                <img src='{!URLFOR($Resource.FN__ContactIcon)}' /><br/>
                            </td>
                            <td>Contacts</td>
                            <td align='left'>
                                <apex:inputCheckbox value="{!searchContacts}" disabled="{! !ContactsAvailable}"/><br/>
                            </td>
                            <td><img src='{!URLFOR($Resource.FN__MyRecords)}' /></td>
                            <td >
                                My Records
                            </td>
                            <td align='left'>
                                <apex:inputCheckbox value="{!OnlyMyRecords}"/>
                            </td>
                            <td align="right" colspan="4"> 
                                 <apex:commandButton action="{!Search}" value="Filter" />
                            </td>
                         </tr>
                        <tr height="25px"></tr>
                    </table>
                </td>
                <td width="15px">
                </td>
                <td valign="top" align="left">
                    <table>
                        <tr>
                            <td valign="top" align="left">
                                Industries      
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <apex:selectList value="{!AccountIndustries}" multiselect="true" size="3"><apex:selectOptions value="{!AccountIndustryOptions}"/></apex:selectList>     
                            </td>
                        </tr>
                    </table>
                </td>
                <apex:outputPanel id="AStatus" rendered="{!searchAccounts}"> 
                <td valign="top" align="left">
                    <table>
                        <tr>
                            <td valign="top" align="left">
                              Account Types  
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <apex:selectList value="{!AccountTypes}" multiselect="true" size="3"><apex:selectOptions value="{!AccountTypeOptions}"/></apex:selectList>
                            </td>
                        </tr>
                    </table>
                </td>
                </apex:outputPanel>
                <apex:outputPanel id="leadStatus" rendered="{!searchLeads}"> 
                <td valign="top" align="left">
                    <table>
                        <tr>
                            <td valign="top" align="left">
                                Lead Status
                            </td>
                        </tr>
                        </tr>
                            <td>
                                <apex:selectList value="{!LeadStatuses}" multiselect="true" size="3"><apex:selectOptions value="{!LeadStatusOptions}"/></apex:selectList>
                            </td>
                        </tr>
                    </table>
                </td>
                </apex:outputPanel>
                <td valign="middle"> 
                   
                </td>
                
           </tr>
        </table>
    </div>
</apex:outputPanel>
   </apex:form>
<table align="center" cellspacing="0" cellpadding="0">
    <tr >
        <td align="left" valign="top" width="100%">
            <apex:outputPanel id="map_div" layout="block" style="width:100%; height:500px; border:5px solid #029acc ;"></apex:outputPanel>
        </td>
        <td align="left" valign="top" id="leftList" >
            <div id="table" class="allMapItemsTable" style="width:200px; height:500px;border:5px solid #029acc ;" ></div>
        </td>
        <td align="left" valign="top" id="rightList" > 
            <div id="fullDynamicDirections" layout="block" style="width:200px; height:500px; border:5px solid #029acc ;border-left-width:0px;"></div>
            <div id="getRouteSummaryDetails"> <a href="#" id="getDetailsLink" >Get the Details</a></div>
            
        </td>
    </tr>
</table>
<script type="text/javascript">
    var map; //The Map on the page
    var directions;  // The directions Object
    var currentSelection; // The last Selection (used to highlight the right list item
    var allMapItems = new Array(); // This is the master array, All items to be plotted
    var destinations = new Array(); // These are only the map Items that the user wants to drive to.
    var dests = new Array();
    
    var bounds = new GLatLngBounds();
    var baseUrl = '{!URLFOR($Resource.FN__GPins, 'GMapIcons/')}';           

    function initialize(){
    
    if ((/MSIE (\d+\.\d+);/.test(navigator.userAgent))){
         document.getElementById('{!$Component.map_div}').style.width=document.body.clientWidth-50+'px';  
    }
        initializeMap();
        collectMapItems();
        populateMap();
        tidyMap();
        
        if (!(/MSIE (\d+\.\d+);/.test(navigator.userAgent))){
            makeAllMapList();
            makeDestinationList();
            miscUI();
        }
        else{
         document.getElementById('leftList').style.display="none";
         document.getElementById('rightList').style.display="none";
         document.getElementById('getRouteSummaryDetails').style.display="none";  
        }
        
    }
    
    
    function makeDestinationList()
    {
        var b ='<ul id='allDestinationList' class="Connected" style=" background-image:url(\'{!URLFOR($Resource.FN__DrivingDirections)}\');    height:500px; ">';
        b+='</ul>';
    
        
        $('#fullDynamicDirections').html( b );
        $("#allDestinationList").sortable({connectWith: '.Connected',dropOnEmpty: true,
            stop: function(){
                var result = $('#allDestinationList').sortable('toArray');
                
                if(result.length>=2)
                {
                    $('#getRouteSummaryDetails').show();
                }
                else{
                    $('#getRouteSummaryDetails').hide();
                }
                
                if(result.length > 0)
                {
                    //$('#allDestinationList').css('background-image','url(\'/abcd\')');
                    $('#allDestinationList').css('background-image','none');
                    var a=0;
                    var b=0;
                    var temp = new Array();
                
                    for(a in result)
                    {
                        for(b in allMapItems)
                        {
                            if(result[a] ==allMapItems[b].id){
                                temp.push(allMapItems[b]);
                            }
                        }
                    }
                    destinations = temp;
               }
               else{
                    $('#allDestinationList').css('background-image','url(\'{!URLFOR($Resource.FN__DrivingDirections)}\')');
               }
               updateDirections();
            }
        });
        
    }

    function makeAllMapList(){
        var pp;
        var t ='<ul id='allList' class="Connected" style="height:500px; ">';
        for(pp=0; pp<allMapItems.length; pp++){
            t+='<li class=\'item\' id=\''+allMapItems[pp].id+'\'><img src=\''+allMapItems[pp].myIcon.image+'\' width=\'15\'/><img id=\'Event'+allMapItems[pp].id+'\' src=\'{!URLFOR($Resource.FN__Plus)}\' width=\'10\'/> '+allMapItems[pp].name+'</li>';
        }
        t+='</ul>';
        
        $(document).ready(function() {
            $('#table').html( t );
            
            //Make the Items all visible                
            $("#allList").sortable({connectWith: '.Connected',appendTo: 'body',zIndex:1000,dropOnEmpty: true,
                stop: function(){
                    var result = $('#allDestinationList').sortable('toArray');
                    var MapItemsInList= $('#allList').sortable('toArray');

                    if(result.length>=2){
                        $('#getRouteSummaryDetails').show();
                    }
                    else{
                        $('#getRouteSummaryDetails').hide();
                    }

                    //$('#allDestinationList').css('background-image','url(\'abcd\')');
                    $('#allDestinationList').css('background-image','none');
                    var a=0; //First Counter
                    var b=0; // Inner Counter
                    var temp = new Array(); // The new Destination List. 
                        
                    for(a in result)
                    {
                        for(b in allMapItems)
                        {
                            if(result[a] ==allMapItems[b].id){
                                temp.push(allMapItems[b]);
                            }
                        }
                    }
                    destinations = temp;
                    
                    updateDirections();
                }   
            });
        });
        
        var ll=0;
        
        for(ll in allMapItems)
        {
            setupMapItem(allMapItems[ll]);
            setupEvent('Event'+allMapItems[ll].id);
        }
        
   }
   
   /*
        Each List Item tied to event
        Params - The MapItem
        Return - None
   */
   function setupMapItem(item){
        //If you click on it, it will open the Map Marker's Blurb
        $('#'+item.id).click(
            function(){
                var panoClient = new GStreetviewClient();
                var panoDiv = document.createElement('div');
                                
                panoDiv.style.width = "400px"; // can be anything, will be auto resized
                panoDiv.style.width = "200px";
    
                var tabs = [new MaxContentTab('streetview', panoDiv)];
                                
                item.myMarker.openMaxContentTabsHtml(map, item.message, item.message, tabs, {
                        maxTitle: "Ground Level"
                });
                
                $('#'+item.id).addClass('Highlight');
                currentSelection = item.id;
                var k=0;
                for(k in allMapItems)
                {
                    if($('#'+allMapItems[k].id).hasClass('Highlight') && allMapItems[k].id != item.id)
                    {
                        $('#'+allMapItems[k].id).removeClass('Highlight');
                    }
                
                }
                
            }
        );
        
        var touchTime= new Date();
        
        document.body.addEventListener('touchstart', function(e) {
            
            dd = new Date();
            if(touchTime.getTime()+500>dd.getTime())
            {
                touch = e.touches[0];
                if ( !touch ) return;
                var me = document.createEvent("MouseEvents");
                me.initMouseEvent('dblclick', true, true, window,
                1, // detail / mouse click count
                touch.screenX, 
                touch.screenY, 
                touch.clientX, 
                touch.clientY, 
                false, false, false, false, // key modifiers
                0, // primary mouse button
                null  // related target not used for dblclick event
                );
                 touch.target.dispatchEvent(me);
            }
            else{
                touchTime = dd;
            }
            
   
},false);


        
        $('#'+item.id).dblclick(
            function(){
                    var result = $('#allDestinationList').sortable('toArray');
                     
                    var b = 0;
                    var inThere=false;
                    for(b in result){
                        if(result[b] == item.id)
                        {
                            inThere = true;                     
                        }
                    }
                    
                    if(!inThere){
                        $('#allDestinationList').append($('#'+item.id));
                    }
                    else{
                        $('#allList').append($('#'+item.id));
                    }
                    
                    if(result.length>=2){
                        $('#getRouteSummaryDetails').show();
                    }
                    else{
                        $('#getRouteSummaryDetails').hide();
                    }
                    if(result.length > 0)
                    {
                        //$('#allDestinationList').css('background-image','url(\'abcd\')');
                        $('#allDestinationList').css('background-image','none');
                    }
                    var a=0; //First Counter
                    var b=0; // Inner Counter
                    var temp = new Array(); // The new Destination List. 
                        
                    for(a in result)
                    {
                        for(b in allMapItems)
                        {
                            if(result[a] ==allMapItems[b].id){
                                temp.push(allMapItems[b]);
                            }
                        }
                    }
                    destinations = temp;
                    
                    updateDirections();
            }
        );
        
        
   }
   
   
   /*
        Setup the interactivity for the + icon on each List Item
        Params - the ID of the dom element
        Return - None
        
   */
   function setupEvent(id){
            
       /*
        Check to see what the user clicked on, to create the right Event Record
       */
       $('#'+id).click(
                function(){
                    var shortId = this.id+'';
                    shortId = shortId.substring(5);
                    var base = '/00U/e?';
                    var it = $('body').data(shortId); 
                                
                    if(it.type == 'Account'){
                        base+='what_id='+it.id;
                    }
                    else{
                        base+='who_id='+it.id;
                    }
                    window.open(base,'_blank');
                }
            );
         
         
        /*
            Make the plus grow and shrink
        */  
        $('#'+id).hover(
                function () {
                    $(this).addClass("hover");
                },
                function () {
                    $(this).removeClass("hover");
                }
            );                   
   } 


   /*
        Add the Event Listeners for the Direction Button
        Params - None
        Return - None 
   */
   function miscUI(){
         $('#getDetailsLink').click( function(){
            window.open(makeDirections(),'_blank');
         });
         $('#getRouteSummaryDetails').hide();
   }
   
   /*
        Redirect the user to Google maps
        Params - None
        Return - The Destination URL
   */
   function makeDirections(){
       dests = ' ';
       var y;
       for(y in destinations)
       {
            if(y==0)
            { 
                dests='http://maps.google.com/maps?f=d&hl=en&saddr='+destinations[0].address+'('+destinations[0].name+')';
            }       
           else{
            dests+=' to: '+destinations[y].address+' ('+destinations[y].name+')';
           }
       }
       return dests;
   }
   
   /*
        Take all of the items in the destination array, then load the waypoints
        Params - None
        Return - None
   */
   function updateDirections(){
       dests = new Array();
       var y;
       for(y in destinations)
       {
           dests.push(destinations[y].point);
       }
       directions.loadFromWaypoints(dests, {getSteps: true,preserveViewport: true});
   } 
   
   /*
        Last thing to do before you Finilize the map, Set center / zoom and UI
        Params - None
        Return - None
   */
    function tidyMap(){
        map.setZoom(map.getBoundsZoomLevel(bounds));
        map.setCenter(bounds.getCenter());
        map.setUIToDefault();
    }
    

    /*
        Setup the elements required for the map
        Params - None
        Return - None
    */
    function initializeMap(){
        //Set the div
        map= new GMap2(document.getElementById('{!$Component.map_div}'));
       
       //Set the Icon Image
       // AIcon.image= baseUrl+'blue_MarkerA.png';
       // LIcon.image= baseUrl+'orange_MarkerA.png';
        
        //Add a map control
        var mapControl = new GMapTypeControl();
        map.setCenter(new GLatLng(0, 0), 2);
        map.setUIToDefault();
        //map.addControl(mapControl);
        
        //Link the directions to the map - without another div, only the map is updated, the step by steps are removed
        directions = new GDirections(map);
    }

    /*
        Take all of the map items, add them to the map
        Params - None
        Returns - None
    */
    function populateMap(){
        var x;
        for ( x=0; x<{!count}; x++)
        {
            bounds.extend(allMapItems[x].myMarker.getPoint());
            map.addOverlay(allMapItems[x].myMarker);
        }
    }
    
    
   function MapItem(name,lat,lon,index,id,type,address,phone,first,second){
        this.name='';
        this.lat='';
        this.lon='';
       
        this.index='';
        this.id='';
        this.type='';
        this.address='';
        this.phone='';
        this.message='';
        this.one= first;
        this.two= second;
        this.originalMarker = 'A';
        this.name = name;
        this.lat = lat;
        this.lon = lon;
        this.index = index;
        this.id = id;
        this.type = type;
        this.address = address;
        this.phone = phone; 
        
        this.myIcon = new GIcon(G_DEFAULT_ICON);
        this.whichLetterIcon = String.fromCharCode(this.originalMarker.charCodeAt(0) + (index % 26));
        this.point = new GLatLng(lat,lon);
        this.DirectionURL = 'http://www.maps.google.com?q='+this.address+'\'/';
        this.mapOption = {icon:this.myIcon};
        
        
        if(index>0)
        {
            this.distance = this.point.distanceFrom(allMapItems[0].point);
            this.distance = this.distance/1609;
            this.distance = Math.round(this.distance*Math.pow(10,1))/Math.pow(10,1);
        } 
        else{
            this.distance = 0;
        }
        this.distance+=' mi. ';
        this.message="<table><tr><td><img src=\'";
        
        if(this.type == 'Account')
        {   
            this.message+='{!URLFOR($Resource.FN__AccountIcon)}';
            this.myIcon.image=baseUrl+'blue_Marker'+this.whichLetterIcon+'.png';
            
           
        }
        if(this.type =='Lead')
        {
            this.message+= '{!URLFOR($Resource.FN__LeadIcon)}';
            this.myIcon.image= baseUrl+'orange_Marker'+this.whichLetterIcon+'.png';
           
           
        }
        if(this.type =='Contact')
        {
            this.message+= '{!URLFOR($Resource.FN__ContactIcon)}';
            
            
            this.myIcon.image= baseUrl+'purple_Marker'+this.whichLetterIcon+'.png';
        }
        this.message+='\'/';
        
        this.message+=' alt=\''+this.type+'Image\' /></td><td><a target=\'_blank\' href=\'/'+this.id+'\' > '+this.name+'</a> <br/><a target=\'_blank\' href=\''+this.DirectionURL+'\' >'+this.address +'</a><br/>'+this.phone ;
        this.message+='<br/> Distance:'+this.distance+'</td></tr></table>';
        this.mapOption = {icon:this.myIcon}; 
        this.preMarker = new GMarker(this.point, this.mapOption);
        this.myMarker = makeMarker(this.preMarker,this.index,this.message,this.id,map);
    }
  
    /*
    This Function creates the actual Google Marker - and its interactions with the table
    
    Marker - the already formed marker missing the Info window and events
    index - the "row number" of this marker on the Map
    msg - the HTML message to display when clicked / expanded
    map - the map object to interact with.
    
    Returns - the completed Google Maps Marker
    */
    function makeMarker(marker,index, msg, id,map){
        
        //Define the StreetView Panorama
        var panoClient = new GStreetviewClient();
        var panoDiv = '<div></div>';
      
        //What happens when a marker is clicked? 
        GEvent.addListener(marker, "click",function(){
            //Make the "Tabs" available on the page
            var tabs = [new MaxContentTab('streetview', panoDiv)];
            marker.openMaxContentTabsHtml(map, msg, msg, tabs, {
                    maxTitle: "Ground Level"
            });
            
            //When the x at the top right corner of the butten is pressed
            GEvent.addListener(map.getTabbedMaxContent(), 'selecttab', function(tab) 
            {
                var node = tab.getContentNode();
                var latlng = map.getInfoWindow().getPoint();
                
                //Create the panorama if it's not already around
                if (!node.pano) 
                {
                    var pano = new GStreetviewPanorama(node);
                    GEvent.addListener(pano, 'error', function(errorCode) 
                    {
                        if (errorCode == 603) 
                        {
                            node.innerHTML = 'StreetView requires flash plugin. Click <a href="http://get.adobe.com/flashplayer/" target="_blank"> here</a> to download';
                        }
                    });
                    
                    pano.setLocationAndPOV(latlng);
                    node.pano = pano;
                }
            });
            
            //Find the Right Item Position
            var tableTop = $('#table').scrollTop(); 
            var otherTop = $('#table').position().top;
            var itemTop = $('#'+id).position().top;
            
            var diff = itemTop + tableTop-otherTop;
            
            $('#table').animate({scrollTop: diff}, 400);
            $('#'+id).addClass('Highlight');
            
            //Update the "Current Selection"
            currentSelection = id;
            
            //Go through all of the map items, update ALL of them, except the one you just click on.
            var k=0;
            for(k in allMapItems)
            {
                if($('#'+allMapItems[k].id).hasClass('Highlight') && allMapItems[k].id != id)
                {
                    $('#'+allMapItems[k].id).removeClass('Highlight');
                }
                
            } 
            
        });
      
        //If you hover over a marker
        GEvent.addListener(marker, "mouseover",function(){
            $('#'+id).addClass('Highlight');
        });
        
        //If you stop hovering over a marker
        GEvent.addListener(marker, "mouseout",function(){
            if(id != currentSelection){
                $('#'+id).removeClass('Highlight');
            }
        });
        return marker;
      }
      
      
      /*
        Goes through each of the locations and put them into the appropriate data lists
        Params - None
        Return - None 
      */
      function collectMapItems(){
        var row =0;
        <apex:repeat value="{!locations}" var="l" id="theRepeat">
            allMapItems[row] = new MapItem('{! JSENCODE(l.rName)}','{!l.rlat}','{!l.rlon}',row,'{!l.rId}','{!JSENCODE(l.rType)}','{!JSENCODE(l.rAddress)}','{!l.rPhone}','{!JSENCODE(l.rOne)}','{!JSENCODE(l.rIndustry)}');
            $('body').data(allMapItems[row].id,allMapItems[row]);
            row++;
        </apex:repeat>
      } 
      
      
      
  google.setOnLoadCallback(initialize);
</script>
<script type="text/javascript">
/*
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @name Tabbed Max Content
 * @version 1.0
 * @author: Nianwei Liu [nianwei at gmail dot com]
 * @fileoverview This library provides a max info window UI that's similar 
 *  to the info window UI for local business results on Google Maps. It lets a 
 *  developer pass in an array of content that will be rendered in tabs in the 
 *  maximized state of an info window.
 */
(function () {
  /*jslint browser:true */
  /*global GMap2,GMarker,GEvent */
  var defaultStyle = {
    tabBar: {
      background: '#F4F4F4 none repeat scroll 0 0',
      borderBottom: '0px solid #029ACC',
      padding: '6px 6px 4px',
      marginRight: '13px',
      whiteSpace: 'nowrap',
      verticalAlign: 'bottom'
    },
    tabLeft: {},
    tabRight: {},
    tabOn: {
      background: '#FFFFFF none repeat scroll 0 0',
      padding: '6px 8px 4px',
      borderTop: '0px solid #029ACC',
      borderLeft:  '0px solid #029ACC',
      borderRight:  '0px solid #029ACC',
      borderBottom: '0px solid #FFFFFF',
      color: '#000000',
      textDecoration: 'none',
      fontWeight: 'bold'
    },
    tabOff: {
      background: '#F4F4F4 none repeat scroll 0 0',
      padding: '6px 8px 4px',
      color: '#0000FF',
      border: 'none',
      textDecoration: 'underline',
      fontWeight: 'normal'
    },
    content: {
      borderStyle: 'none solid solid solid',
      borderWidth: '0px',
      borderColor: '#029ACC',
      borderTop: 'none',
      overflow: 'auto'
    },
    summary: {
      overflow: 'auto',
      marginBottom: '5px'
    }
  };

  var setVals = function (obj, vals) {
    if (obj && vals) {
      for (var x in vals) {
        if (vals.hasOwnProperty(x)) {
          if (obj[x] && typeof vals[x] === 'object') {
            obj[x] = setVals(obj[x], vals[x]);
          } else {
            obj[x] = vals[x];
          }
        }
      }
    }
    return obj;
  };
 
  var createEl = function (tag, attrs, content, style, parent) {
    var node = content;
    if (!content || (content && typeof content === 'string')) {
      node = document.createElement(tag);
      node.innerHTML = content || ''; 
    }
    if (style) {
      setVals(node.style, style);
    }
    if (attrs) {
      setVals(node, attrs);
    }
    if (parent) {
      parent.appendChild(node);
    }
    return node;
  };
  
  var getPosition = function (el, parent) {
    var leftPos = 0;
    var topPos = 0;
    var par = el;
    while (par && par !== parent) {
      leftPos += par.offsetLeft;
      topPos += par.offsetTop;
      par = par.offsetParent;
    }
    return {
      left: leftPos,
      top: topPos
    };
  };
  
  function MaxContentTab(label, content) {
    this.label_ = label;
    this.contentNode_ = createEl('div', null, content, null, null);
    this.navNode_ = null;
  }

  MaxContentTab.prototype.getLabel = function () {
    return this.label_;
  };

  MaxContentTab.prototype.getContentNode = function () {
    return this.contentNode_;
  };
  
  function TabbedMaxContent(iw) {
    this.infoWindow_ = iw;
    GEvent.bind(iw, 'restoreclick', this, this.onRestoreClick_);
    GEvent.bind(iw, 'maximizeend', this, this.onMaximizeEnd_);
    this.style_ = {};
    this.maxNode_ = null;
    this.summaryNode_ = null;
    this.navsNode_ = null;
    this.contentsNode_ = null;
    this.tabs_ = [];
  }
  
  TabbedMaxContent.prototype.initialize_ = function (sumNode, tabs, opt_maxOptions) {
    this.tabs_ = tabs;
    this.selectedTab_ = -1;
    if (this.maxNode_) {
      GEvent.clearNode(this.maxNode_);
      this.maxNode_ = null;
    } 
    this.maxNode_ = createEl('div', {
        id: 'maxcontent'
    });
    opt_maxOptions = opt_maxOptions || {};
    var selectedTab = opt_maxOptions.selectedTab || 0;
    this.style_ = setVals({}, defaultStyle);
    this.style_ = setVals(this.style_, opt_maxOptions.style);
    this.summaryNode_ = createEl('div', null, sumNode, this.style_.summary, this.maxNode_);
    this.navsNode_ = createEl('div', null, null, this.style_.tabBar, this.maxNode_);
    this.contentsNode_ = createEl('div', null, null, null, this.maxNode_);
    if (tabs && tabs.length) {
      // left
      createEl('span', null, null, this.style_.tabLeft, this.navsNode_);
      for (var i = 0, ct = tabs.length; i < ct; i++) {
        if (i === selectedTab || tabs[i].getLabel() === selectedTab) {
          this.selectedTab_ = i;
        }
        tabs[i].navNode_ = createEl('span', null, tabs[i].getLabel(), this.style_.tabOff, this.navsNode_);//);
        var node = createEl('div', null, tabs[i].getContentNode(), this.style_.content, this.contentsNode_);
        node.style.display = 'none';
      }
      // right
      createEl('span', null, null, this.style_.tabRight, this.navsNode_);
    }
  };
  
  TabbedMaxContent.prototype.onRestoreClick_ = function () {
    if (this.maxNode_) {
      GEvent.clearNode(this.maxNode_);
    }
  };

  TabbedMaxContent.prototype.onMaximizeEnd_ = function () {
    for (var i = 0, ct = this.tabs_.length; i < ct; i++) {
      GEvent.addDomListener(this.tabs_[i].navNode_, 'click', GEvent.callback(this, this.selectTab, i));
    }
    this.checkResize();
    this.selectTab(this.selectedTab_);
  };

  TabbedMaxContent.prototype.selectTab = function (identifier) {
    var trigger = false;
    var hasVisibleTab = false;
    var tab;
    for (var i = 0, ct = this.tabs_.length; i < ct; i++) {
      tab = this.tabs_[i];
      if (i === identifier || tab.getLabel() === identifier) {
        if (tab.getContentNode().style.display === 'none') {
          setVals(tab.navNode_.style, this.style_.tabOn);
          tab.getContentNode().style.display = 'block';
          this.selectedTab_ = i;  
          trigger = true;
        }
        hasVisibleTab = true; 
      } else {
        setVals(tab.navNode_.style, this.style_.tabOff);
        tab.getContentNode().style.display = 'none';
      }
    }
    // avoid excessive event if clicked on a selected tab.
    if (trigger) {
     
      GEvent.trigger(this, 'selecttab', this.tabs_[this.selectedTab_]);
    }
    if (!hasVisibleTab) {
      this.selectTab(0);
    }
  };

  TabbedMaxContent.prototype.getTab = function (identifier) {
    for (var i = 0, ct = this.tabs_.length; i < ct; i++) {
      if (i === identifier || this.tabs_[i].getLabel() === identifier) {
        return this.tabs_[i];
      }
    }
  };
  
   TabbedMaxContent.prototype.checkResize = function () {
    var container = this.infoWindow_.getContentContainers()[0];
    var contents = this.contentsNode_;
    var pos = getPosition(contents, container);
    for (var i = 0, ct = this.tabs_.length; i < ct; i++) {
      var t = this.tabs_[i].getContentNode();
      t.style.width = container.style.width;
      t.style.height = (parseInt(container.style.height, 10) - pos.top) + 'px';
    }
  };
 
  GMap2.prototype.openMaxContentTabs = function (latlng, minNode, sumNode, tabs, opt_maxOptions) {
    var max = this.getTabbedMaxContent();
    var opts = opt_maxOptions || {};
    max.initialize_(sumNode, tabs, opts);
    opts.maxContent = max.maxNode_;
    if (opts.style) {
      delete opts.style;
    }
    if (opts.selectedTab) {
      delete opts.selectedTab;
    }
    if (minNode.style) {
      minNode.style.marginTop = '6px';
    }
    this.openInfoWindow(latlng, minNode, opts);
    if (opts.maximized) {
      var iw = this.getInfoWindow();
      var m = GEvent.addListener(this, 'infowindowopen', function () {
        GEvent.removeListener(m);
        iw.maximize();
      });
    }
  };
  GMap2.prototype.openMaxContentTabsHtml = function (latlng, html, summary, tabs, opt_maxOptions) {
    this.openMaxContentTabs(latlng, createEl('div', null, html), createEl('div', null, summary), tabs, opt_maxOptions);
  };

  GMap2.prototype.getTabbedMaxContent = function () {
    this.maxContent_  = this.maxContent_ || new TabbedMaxContent(this.getInfoWindow());
    return this.maxContent_;
  };
  GMarker.prototype.openMaxContentTabsHtml = function (map, minHtml, summaryHtml, tabs, opt_maxOptions) {
    map.openMaxContentTabsHtml(this.getLatLng(), minHtml, summaryHtml, tabs, opt_maxOptions);
  };

  GMarker.prototype.openMaxContentTabs = function (map, minNode, summaryNode, tabs, opt_maxOptions) {
    map.openMaxContentTabs(this.getLatLng(), minNode, summaryNode, tabs, opt_maxOptions);
  };
  
  window.MaxContentTab = MaxContentTab;
})();

</script>
</apex:page>